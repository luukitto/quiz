{"ast":null,"code":"import * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/router\";\nimport * as i2 from \"@angular/material/card\";\nimport * as i3 from \"@angular/common\";\nimport * as i4 from \"../../components/question/question.component\";\nimport * as i5 from \"@ng-bootstrap/ng-bootstrap\";\n\nfunction QuestionComponent_div_16_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"div\", 16);\n    i0.ɵɵelementStart(1, \"span\");\n    i0.ɵɵtext(2);\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementEnd();\n  }\n\n  if (rf & 2) {\n    const ctx_r0 = i0.ɵɵnextContext();\n    i0.ɵɵadvance(2);\n    i0.ɵɵtextInterpolate2(\"Question \", ctx_r0.question.questionId, \" of \", ctx_r0.totalQuestions, \"\");\n  }\n}\n\nfunction QuestionComponent_span_22_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"span\");\n    i0.ɵɵtext(1, \"0\");\n    i0.ɵɵelementEnd();\n  }\n}\n\nfunction QuestionComponent_div_30_Template(rf, ctx) {\n  if (rf & 1) {\n    const _r6 = i0.ɵɵgetCurrentView();\n\n    i0.ɵɵelementStart(0, \"div\", 17);\n    i0.ɵɵelementStart(1, \"button\", 18);\n    i0.ɵɵlistener(\"click\", function QuestionComponent_div_30_Template_button_click_1_listener() {\n      i0.ɵɵrestoreView(_r6);\n      const ctx_r5 = i0.ɵɵnextContext();\n      return ctx_r5.navigateToNextQuestion();\n    });\n    i0.ɵɵtext(2, \" Next \\u00BB \");\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementEnd();\n  }\n\n  if (rf & 2) {\n    const ctx_r2 = i0.ɵɵnextContext();\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"disabled\", ctx_r2.disabled);\n  }\n}\n\nfunction QuestionComponent_div_31_Template(rf, ctx) {\n  if (rf & 1) {\n    const _r8 = i0.ɵɵgetCurrentView();\n\n    i0.ɵɵelementStart(0, \"div\", 19);\n    i0.ɵɵelementStart(1, \"button\", 20);\n    i0.ɵɵlistener(\"click\", function QuestionComponent_div_31_Template_button_click_1_listener() {\n      i0.ɵɵrestoreView(_r8);\n      const ctx_r7 = i0.ɵɵnextContext();\n      return ctx_r7.navigateToResults();\n    });\n    i0.ɵɵtext(2, \" Show Your Score \");\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementEnd();\n  }\n}\n\nfunction QuestionComponent_ngb_progressbar_33_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"ngb-progressbar\", 21);\n    i0.ɵɵelementStart(1, \"strong\");\n    i0.ɵɵtext(2);\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementEnd();\n  }\n\n  if (rf & 2) {\n    const ctx_r4 = i0.ɵɵnextContext();\n    i0.ɵɵproperty(\"striped\", true)(\"animated\", true)(\"value\", ctx_r4.progressValue);\n    i0.ɵɵadvance(2);\n    i0.ɵɵtextInterpolate1(\"\", ctx_r4.progressValue, \"%\");\n  }\n}\n\nexport let QuestionComponent = /*#__PURE__*/(() => {\n  class QuestionComponent {\n    constructor(route, router) {\n      this.route = route;\n      this.router = router;\n      this.correctAnswersCount = 0;\n      this.questionID = 0;\n      this.currentQuestion = 0;\n      this.timePerQuestion = 20;\n      this.elapsedTimes = [];\n      this.blueBorder = '2px solid #007aff';\n      this.allQuestions = [{\n        questionId: 1,\n        questionText: 'What is the objective of dependency injection?',\n        options: [{\n          optionValue: '1',\n          optionText: 'Pass the service to the client.'\n        }, {\n          optionValue: '2',\n          optionText: 'Allow the client to find service.'\n        }, {\n          optionValue: '3',\n          optionText: 'Allow the client to build service.'\n        }, {\n          optionValue: '4',\n          optionText: 'Give the client part service.'\n        }],\n        answer: '1',\n        explanation: 'a service gets passed to the client during DI',\n        selectedOption: ''\n      }, {\n        questionId: 2,\n        questionText: 'Which of the following benefit from dependency injection?',\n        options: [{\n          optionValue: '1',\n          optionText: 'Programming'\n        }, {\n          optionValue: '2',\n          optionText: 'Testability'\n        }, {\n          optionValue: '3',\n          optionText: 'Software design'\n        }, {\n          optionValue: '4',\n          optionText: 'All of the above.'\n        }],\n        answer: '4',\n        explanation: 'DI simplifies both programming and testing as well as being a popular design pattern',\n        selectedOption: ''\n      }, {\n        questionId: 3,\n        questionText: 'Which of the following is the first step in setting up dependency injection?',\n        options: [{\n          optionValue: '1',\n          optionText: 'Require in the component.'\n        }, {\n          optionValue: '2',\n          optionText: 'Provide in the module.'\n        }, {\n          optionValue: '3',\n          optionText: 'Mark dependency as @Injectable().'\n        }, {\n          optionValue: '4',\n          optionText: 'Declare an object.'\n        }],\n        answer: '3',\n        explanation: 'the first step is marking the class as @Injectable()',\n        selectedOption: ''\n      }, {\n        questionId: 4,\n        questionText: 'In which of the following does dependency injection occur?',\n        options: [{\n          optionValue: '1',\n          optionText: '@Injectable()'\n        }, {\n          optionValue: '2',\n          optionText: 'constructor'\n        }, {\n          optionValue: '3',\n          optionText: 'function'\n        }, {\n          optionValue: '4',\n          optionText: 'NgModule'\n        }],\n        answer: '2',\n        explanation: 'object instantiations are taken care of by the constructor in Angular',\n        selectedOption: ''\n      }];\n      this.route.paramMap.subscribe(params => {\n        this.setQuestionID(+params.get('questionId')); // get the question ID and store it\n\n        this.question = this.getQuestion;\n      });\n    }\n\n    ngOnInit() {\n      this.question = this.getQuestion;\n      this.totalQuestions = this.allQuestions.length;\n      this.timeLeft = this.timePerQuestion;\n      this.progressValue = 100 * (this.currentQuestion + 1) / this.totalQuestions;\n      this.countdown();\n    }\n\n    displayNextQuestion() {\n      this.resetTimer();\n      this.increaseProgressValue();\n      this.questionIndex = this.questionID++;\n\n      if (typeof document.getElementById('question') !== 'undefined' && this.getQuestionID() <= this.totalQuestions) {\n        document.getElementById('question').innerHTML = this.allQuestions[this.questionIndex]['questionText'];\n        document.getElementById('question').style.border = this.blueBorder;\n      } else {\n        this.navigateToResults();\n      }\n    }\n    /* displayPreviousQuestion() {\n      this.resetTimer();\n      this.decreaseProgressValue();\n         this.questionIndex = this.questionID--;\n         if (typeof document.getElementById('question') !== 'undefined' && this.getQuestionID() <= this.totalQuestions) {\n        document.getElementById('question').innerHTML = this.allQuestions[this.questionIndex]['questionText'];\n        document.getElementById('question').style.border = this.blueBorder;\n      } else {\n        this.navigateToResults();\n      }\n    } */\n\n\n    navigateToNextQuestion() {\n      this.router.navigate(['/question', this.getQuestionID() + 1]);\n      this.displayNextQuestion();\n    }\n    /* navigateToPreviousQuestion(): void {\n      this.router.navigate(['/question', this.getQuestionID() - 1]);\n      this.displayPreviousQuestion();\n    } */\n\n\n    navigateToResults() {\n      this.router.navigate(['/results'], {\n        state: {\n          totalQuestions: this.totalQuestions,\n          correctAnswersCount: this.correctAnswersCount,\n          completionTime: this.completionTime,\n          allQuestions: this.allQuestions\n        }\n      });\n    } // checks whether the question is valid and is answered correctly\n\n\n    checkIfAnsweredCorrectly() {\n      if (this.isThereAnotherQuestion() && this.isCorrectAnswer()) {\n        this.incrementCorrectAnswersCount();\n        this.correctAnswer = true;\n        this.hasAnswer = true;\n        this.disabled = false;\n        this.elapsedTime = Math.ceil(this.timePerQuestion - this.timeLeft);\n\n        if (this.getQuestionID() < this.totalQuestions) {\n          this.elapsedTimes = [...this.elapsedTimes, this.elapsedTime];\n        } else {\n          this.elapsedTimes = [...this.elapsedTimes, 0];\n          this.completionTime = this.calculateTotalElapsedTime(this.elapsedTimes);\n        }\n\n        this.quizDelay(3000);\n\n        if (this.getQuestionID() < this.totalQuestions) {\n          this.navigateToNextQuestion();\n        } else {\n          this.navigateToResults();\n        }\n      }\n    }\n\n    incrementCorrectAnswersCount() {\n      if (this.questionID <= this.totalQuestions && this.isCorrectAnswer()) {\n        if (this.correctAnswersCount === this.totalQuestions) {\n          return this.correctAnswersCount;\n        } else {\n          this.correctAnswer = true;\n          this.hasAnswer = true;\n          return this.correctAnswersCount++;\n        }\n      } else {\n        this.correctAnswer = false;\n        this.hasAnswer = false;\n      }\n    }\n\n    increaseProgressValue() {\n      this.progressValue = parseFloat((100 * (this.getQuestionID() + 1) / this.totalQuestions).toFixed(1));\n    }\n    /* decreaseProgressValue() {\n      this.progressValue = parseFloat((100 * (this.getQuestionID() - 1) / this.totalQuestions).toFixed(1));\n    } */\n\n\n    calculateTotalElapsedTime(elapsedTimes) {\n      return this.completionTime = elapsedTimes.reduce((acc, cur) => acc + cur, 0);\n    }\n    /****************  public API  ***************/\n\n\n    getQuestionID() {\n      return this.questionID;\n    }\n\n    setQuestionID(id) {\n      return this.questionID = id;\n    }\n\n    isThereAnotherQuestion() {\n      return this.questionID <= this.allQuestions.length;\n    }\n\n    isFinalQuestion() {\n      return this.currentQuestion === this.totalQuestions;\n    }\n\n    isCorrectAnswer() {\n      return this.question.selectedOption === this.question.answer;\n    }\n\n    get getQuestion() {\n      return this.allQuestions.filter(question => question.questionId === this.questionID)[0];\n    } // countdown clock\n\n\n    countdown() {\n      if (this.questionID <= this.totalQuestions) {\n        this.interval = setInterval(() => {\n          if (this.timeLeft > 0) {\n            this.timeLeft--;\n            this.checkIfAnsweredCorrectly();\n\n            if (this.correctAnswersCount <= this.totalQuestions) {\n              this.calculateTotalElapsedTime(this.elapsedTimes);\n            }\n\n            if (this.timeLeft === 0 && !this.isFinalQuestion()) {\n              this.navigateToNextQuestion();\n            }\n\n            if (this.timeLeft === 0 && this.isFinalQuestion()) {\n              this.navigateToResults();\n            }\n\n            if (this.isFinalQuestion() && this.hasAnswer === true) {\n              this.navigateToResults();\n              this.quizIsOver = true;\n            } // disable the next button until an option has been selected\n\n\n            this.question.selectedOption === '' ? this.disabled = true : this.disabled = false;\n          }\n        }, 1000);\n      }\n    }\n\n    resetTimer() {\n      this.timeLeft = this.timePerQuestion;\n    }\n\n    quizDelay(milliseconds) {\n      const start = new Date().getTime();\n      let counter = 0;\n      let end = 0;\n\n      while (counter < milliseconds) {\n        end = new Date().getTime();\n        counter = end - start;\n      }\n    }\n\n  }\n\n  QuestionComponent.ɵfac = function QuestionComponent_Factory(t) {\n    return new (t || QuestionComponent)(i0.ɵɵdirectiveInject(i1.ActivatedRoute), i0.ɵɵdirectiveInject(i1.Router));\n  };\n\n  QuestionComponent.ɵcmp = /*@__PURE__*/i0.ɵɵdefineComponent({\n    type: QuestionComponent,\n    selectors: [[\"codelab-question-container\"]],\n    inputs: {\n      answer: \"answer\",\n      formGroup: \"formGroup\"\n    },\n    outputs: {\n      question: \"question\"\n    },\n    decls: 34,\n    vars: 10,\n    consts: [[\"mat-card-avatar\", \"\", 1, \"header-image\"], [1, \"mat-card-container\"], [1, \"scoreboard\"], [1, \"row\"], [1, \"score\"], [1, \"leader\"], [\"class\", \"badge\", 4, \"ngIf\"], [1, \"time-left\"], [4, \"ngIf\"], [\"id\", \"question\"], [3, \"question\"], [1, \"paging\"], [\"class\", \"nextQuestionNav\", 4, \"ngIf\"], [\"class\", \"showScoreNav\", 4, \"ngIf\"], [1, \"progress-bar\"], [\"type\", \"success\", 3, \"striped\", \"animated\", \"value\", 4, \"ngIf\"], [1, \"badge\"], [1, \"nextQuestionNav\"], [\"type\", \"button\", 3, \"disabled\", \"click\"], [1, \"showScoreNav\"], [\"type\", \"button\", 3, \"click\"], [\"type\", \"success\", 3, \"striped\", \"animated\", \"value\"]],\n    template: function QuestionComponent_Template(rf, ctx) {\n      if (rf & 1) {\n        i0.ɵɵelementStart(0, \"mat-card\");\n        i0.ɵɵelementStart(1, \"mat-card-header\");\n        i0.ɵɵelement(2, \"div\", 0);\n        i0.ɵɵelementStart(3, \"div\", 1);\n        i0.ɵɵelementStart(4, \"mat-card-title\");\n        i0.ɵɵtext(5, \"Dependency Injection Quiz\");\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(6, \"mat-card-subtitle\");\n        i0.ɵɵtext(7, \" Assess your knowledge of Dependency Injection \");\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(8, \"mat-card-content\");\n        i0.ɵɵelementStart(9, \"section\", 2);\n        i0.ɵɵelementStart(10, \"div\", 3);\n        i0.ɵɵelementStart(11, \"div\", 4);\n        i0.ɵɵelementStart(12, \"span\", 5);\n        i0.ɵɵtext(13, \"Score\");\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(14, \"span\", 2);\n        i0.ɵɵtext(15);\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementEnd();\n        i0.ɵɵtemplate(16, QuestionComponent_div_16_Template, 3, 2, \"div\", 6);\n        i0.ɵɵelementStart(17, \"div\", 7);\n        i0.ɵɵelementStart(18, \"span\", 5);\n        i0.ɵɵtext(19, \"Time\");\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(20, \"span\", 2);\n        i0.ɵɵtext(21, \" 0:\");\n        i0.ɵɵtemplate(22, QuestionComponent_span_22_Template, 2, 0, \"span\", 8);\n        i0.ɵɵtext(23);\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(24, \"section\", 9);\n        i0.ɵɵtext(25);\n        i0.ɵɵelementEnd();\n        i0.ɵɵelement(26, \"codelab-quiz-question\", 10);\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(27, \"mat-card-footer\");\n        i0.ɵɵelementStart(28, \"section\", 11);\n        i0.ɵɵelementStart(29, \"mat-card-actions\");\n        i0.ɵɵtemplate(30, QuestionComponent_div_30_Template, 3, 1, \"div\", 12);\n        i0.ɵɵtemplate(31, QuestionComponent_div_31_Template, 3, 0, \"div\", 13);\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(32, \"section\", 14);\n        i0.ɵɵtemplate(33, QuestionComponent_ngb_progressbar_33_Template, 3, 4, \"ngb-progressbar\", 15);\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementEnd();\n      }\n\n      if (rf & 2) {\n        i0.ɵɵadvance(15);\n        i0.ɵɵtextInterpolate2(\" \", ctx.correctAnswersCount, \"/\", ctx.totalQuestions, \" \");\n        i0.ɵɵadvance(1);\n        i0.ɵɵproperty(\"ngIf\", ctx.question && ctx.question.questionId <= ctx.totalQuestions);\n        i0.ɵɵadvance(6);\n        i0.ɵɵproperty(\"ngIf\", ctx.timeLeft < 10);\n        i0.ɵɵadvance(1);\n        i0.ɵɵtextInterpolate1(\"\", ctx.timeLeft, \" \");\n        i0.ɵɵadvance(2);\n        i0.ɵɵtextInterpolate(ctx.question.questionText);\n        i0.ɵɵadvance(1);\n        i0.ɵɵproperty(\"question\", ctx.question);\n        i0.ɵɵadvance(4);\n        i0.ɵɵproperty(\"ngIf\", ctx.question && ctx.question.questionId !== ctx.totalQuestions);\n        i0.ɵɵadvance(1);\n        i0.ɵɵproperty(\"ngIf\", ctx.question && ctx.question.questionId === ctx.totalQuestions);\n        i0.ɵɵadvance(2);\n        i0.ɵɵproperty(\"ngIf\", ctx.progressValue >= 0 && ctx.progressValue <= 100 && ctx.question && ctx.question.questionId <= ctx.totalQuestions);\n      }\n    },\n    directives: [i2.MatCard, i2.MatCardHeader, i2.MatCardAvatar, i2.MatCardTitle, i2.MatCardSubtitle, i2.MatCardContent, i3.NgIf, i4.QuestionComponent, i2.MatCardFooter, i2.MatCardActions, i5.NgbProgressbar],\n    styles: [\"@font-face{font-family:Alarm Clock;src:url(../../../assets/alarm-clock.ttf) format(\\\"truetype\\\")}mat-card-header[_ngcontent-%COMP%]{display:block}mat-card-header[_ngcontent-%COMP%]   .header-image[_ngcontent-%COMP%]{margin-left:15px}mat-card-header[_ngcontent-%COMP%]   .mat-card-container[_ngcontent-%COMP%]{float:right;margin-top:-85px;margin-right:15px;margin-left:5px!important;text-align:center}mat-card-header[_ngcontent-%COMP%]   .mat-card-container[_ngcontent-%COMP%]   .subtitle2[_ngcontent-%COMP%]{display:block}section.scoreboard[_ngcontent-%COMP%]{margin-top:10px!important}section.scoreboard[_ngcontent-%COMP%]   .row[_ngcontent-%COMP%]{display:inline}section.scoreboard[_ngcontent-%COMP%]   .score[_ngcontent-%COMP%]{float:left;margin-left:1rem}section.scoreboard[_ngcontent-%COMP%]   .score[_ngcontent-%COMP%]   .leader[_ngcontent-%COMP%]{margin-left:15px}section.scoreboard[_ngcontent-%COMP%]   .badge[_ngcontent-%COMP%]{float:left;margin:20px 10px 0 100px;font-family:Space Mono,monospace;font-size:24px;font-weight:900;font-style:italic}section.scoreboard[_ngcontent-%COMP%]   .time-left[_ngcontent-%COMP%]{float:right;margin-right:1rem}section.scoreboard[_ngcontent-%COMP%]   .time-left[_ngcontent-%COMP%]   .leader[_ngcontent-%COMP%]{margin-left:20px}section.scoreboard[_ngcontent-%COMP%]   .scoreboard[_ngcontent-%COMP%]{font-family:Alarm Clock,Space Mono,monospace;font-weight:900;font-size:30px;color:#006400;display:inline-block;margin:-5px 0 0 15px;width:auto}section.scoreboard[_ngcontent-%COMP%]   .leader[_ngcontent-%COMP%]{display:block;font-weight:900;font-size:18px;text-transform:uppercase;position:relative;top:-5px}section#question[_ngcontent-%COMP%]{font-family:Space Mono,monospace;font-weight:700;font-size:30px!important;margin:0 0 10px .4rem;float:left;border:2px solid #007aff;padding:5px 10px 15px 20px;background-color:#f5f5f5;color:#0f0900;width:39rem!important;height:auto;vertical-align:middle}section.paging[_ngcontent-%COMP%]{width:40rem}section.paging[_ngcontent-%COMP%]   mat-card-actions[_ngcontent-%COMP%]{margin:-10px 0 10px}section.paging[_ngcontent-%COMP%]   mat-card-actions[_ngcontent-%COMP%]   .previousQuestionNav[_ngcontent-%COMP%]{float:left;margin-left:1.5rem}section.paging[_ngcontent-%COMP%]   mat-card-actions[_ngcontent-%COMP%]   .nextQuestionNav[_ngcontent-%COMP%]{float:right;margin-right:-.4rem}section.paging[_ngcontent-%COMP%]   mat-card-actions[_ngcontent-%COMP%]   .showScoreNav[_ngcontent-%COMP%]{width:150px;text-align:center;margin:0 auto}section.paging[_ngcontent-%COMP%]   mat-card-actions[_ngcontent-%COMP%]   .nextQuestionNav[_ngcontent-%COMP%]:hover, section.paging[_ngcontent-%COMP%]   mat-card-actions[_ngcontent-%COMP%]   .showScoreNav[_ngcontent-%COMP%]:hover{border:1px solid #007aff}section.paging[_ngcontent-%COMP%]   mat-card-actions[_ngcontent-%COMP%]   .showScoreNav[_ngcontent-%COMP%]:hover{width:141.5px!important}section.progress-bar[_ngcontent-%COMP%]{margin:40px 0 10px 1.5rem;width:39rem;height:auto}section.progress-bar[_ngcontent-%COMP%]   ngb-progressbar[_ngcontent-%COMP%]{border-radius:10px}\"]\n  });\n  return QuestionComponent;\n})();","map":null,"metadata":{},"sourceType":"module"}